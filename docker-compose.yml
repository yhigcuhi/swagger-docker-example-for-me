# docker compose yml としての書き方の バージョン
version: '3.8'

# 立てるコンテナ一覧
services:
  # swagger editor (Swaggerの仕様にしたがってYAML(JSON)ファイルを編集するツール)
  swagger-editor:
    # imageで
    image: swaggerapi/swagger-editor
    # 管理コンテナ名
    container_name: ${APP_NAME}-swagger-editor
    # 利用ポート
    ports:
      - ${EDITOR_PORT:-8001}:8080
  # 参考 https://qiita.com/minato-naka/items/3b0bcf0788a2150f3171
  # ReDoc (SwaggerUIよりもみやすいし、HTML出力とかできるらしいやつ)
  redoc:
    # 管理コンテナ名
    container_name: ${APP_NAME}-redoc
    # nginx confいじる(キャッシュ無効化)ために (カスタマイズした点)
    build: ./docker/redoc
    # 利用ポート
    ports:
      - ${REDOC_PORT:-8004}:80
    # マウント = ビルド先
    volumes:
      - ./swagger/public/openapi.yaml:/usr/share/nginx/html/openapi.yaml
    # 環境変数
    environment:
      # 閲覧する yamlの選択っぽい？複数個無理かなw
      SPEC_URL: openapi.yaml
  # ReDoc CLI (HTMLで出力すると火曜っぽい)
  redoc-cli:
    # 管理コンテナ名
    container_name: ${APP_NAME}-redoc-cli
    # library installとかあるので
    build: ./docker/redoc-cli
    # マウント = なんとなく build後のファイルなのかなと
    volumes:
      - ./swagger/public:/var/www/html
  # https://zenn.dev/cozynooks/scraps/cebc9466fbb973
  # swagger 分割ファイルをマージするやつ (Nodejs)
  swagger-merger:
    # 管理コンテナ名
    container_name: ${APP_NAME}-swagger-merger
    # library installとかあるので
    build: ./docker/swagger-merger
    # 初回起動コマンド後の
    command: >
      watch 'swagger-merger -i /docs/src/index.yaml -o /docs/public/openapi.yaml' /docs/src/
    # マウント先
    volumes:
      - ./swagger:/docs
  # swagger openAPI(REST) mockup server 一旦作ってみる
  swagger-mockup-api:
    # imageで
    image: stoplight/prism
    # 管理コンテナ名
    container_name: ${APP_NAME}-swagger-mockup-api
    # 利用ポート
    ports:
      - ${MOCKUP_PORT:-8003}:4010
    # モックアップ起動
    command: mock -h 0.0.0.0 /openapi.yaml
    # マウント
    volumes:
      - ./swagger/public/openapi.yaml:/openapi.yaml
  # https://github.com/openapitools/openapi-generator-cli
  # openapi-generatorによるlaravelコード自動生成 コマンドの環境
  laravel-codegen:
    # image
    image: openapitools/openapi-generator-cli
    # マウント先
    volumes:
      - ./swagger:/local
    # 起動時(docker compose up -dの時に generatorのコマンド実行) サンプルのlaravelを作らせるなら
    # Javaでの記述だが、mustacheで自動生成内容をカスタマイズできる模様 https://qiita.com/watiko/items/0961287c02eac9211572
    command: generate -g php-laravel -i local/public/openapi.yaml -o local/codegen/laravel
